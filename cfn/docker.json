{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"An ECS cluster for s3strm",

  "Parameters": {
    "InstanceType" : {
      "Description" : "The EC2 instance type",
      "Type" : "String",
      "Default" : "t2.nano",
      "AllowedValues" : [ "t2.nano", "t2.micro" ],
      "ConstraintDescription" : "You can specify only t2.nano or t2.micro."
    },

    "KeyName" : {
      "Description" : "The EC2 instance type",
      "Type" : "String",
      "Default" : "s3strm"
    }
  },

  "Mappings" : {
    "EcsAmi" : {
      "us-east-1"      : { "Ami" : "ami-55870742" },
      "us-west-1"      : { "Ami" : "ami-07713767" },
      "us-west-2"      : { "Ami" : "ami-241bd844" },
      "eu-west-1"      : { "Ami" : "ami-c74127b4" },
      "eu-central-1"   : { "Ami" : "ami-3b54be54" },
      "ap-northeast-1" : { "Ami" : "ami-2b08f44a" },
      "ap-southeast-1" : { "Ami" : "ami-6b61bc08" },
      "ap-southeast-2" : { "Ami" : "ami-d5b59eb6" }
    }
  },

  "Resources": {
    "Repository": {
      "Type" : "AWS::ECR::Repository",
      "Properties" : {
        "RepositoryName" : "s3strm"
      }
    },

    "Cluster": {
      "Type" : "AWS::ECS::Cluster"
    },

    "Vpc": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.220.0.0/16"
      }
    },

    "InternetGateway": {
      "Type" : "AWS::EC2::InternetGateway"
    },

    "VpcGateway": {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "InternetGatewayId" : { "Ref": "InternetGateway" },
        "VpcId" : { "Ref": "Vpc" }
      }
    },

    "RouteTable": {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref": "Vpc" }
      }
    },

    "Route": {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref": "InternetGateway" },
        "RouteTableId" : { "Ref": "RouteTable" }
      }
    },

    "Subnet": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : "10.220.0.0/20",
        "MapPublicIpOnLaunch": "true",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "SubnetRouteTable" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "EcsSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "s3strm ECS instances",
        "VpcId" : { "Ref": "Vpc" },
        "SecurityGroupEgress": {
          "CidrIp" : "0.0.0.0/0",
          "IpProtocol" : "-1"
        },
        "SecurityGroupIngress": {
          "CidrIp" : "0.0.0.0/0",
          "FromPort" : 22,
          "ToPort" : 22,
          "IpProtocol" : "tcp"
        }
      }
    },

    "EcsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "EcsRole" } ]
      }
    },

    "EcsAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Ref" : "Subnet" } ],
        "LaunchConfigurationName" : { "Ref" : "EcsLaunchConfiguration" },
        "DesiredCapacity" : "1",
        "MaxSize" : "1",
        "MinSize" : "1"
      },
      "CreationPolicy" : {
        "ResourceSignal" : { "Timeout" : "PT15M" }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "0",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "DependsOn" : "VpcGateway"
    },

   "EcsLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "01_add_instance_to_cluster" : {
                "command" : { "Fn::Join": [ "", [ "#!/bin/bash\n", "echo ECS_CLUSTER=", { "Ref": "Cluster" }, " >> /etc/ecs/ecs.config" ] ] }
              }
            },

            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "  --stack ", { "Ref" : "AWS::StackName" },
                  "  --resource ContainerInstances ",
                  "  --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "EcsAmi", { "Ref" : "AWS::Region" }, "Ami" ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "IamInstanceProfile": { "Ref": "EcsInstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups": [ { "Ref": "EcsSecurityGroup" } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum install -y aws-cfn-bootstrap\n",

             "/opt/aws/bin/cfn-init -v ",
             "  --stack ", { "Ref" : "AWS::StackName" },
             "  --resource ContainerInstances ",
             "  --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "  --stack ", { "Ref" : "AWS::StackName" },
             "  --resource ECSAutoScalingGroup ",
             "  --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    }
  },

  "Outputs": {
    "Cluster": {
      "Value": { "Ref": "Cluster" }
    },

    "Repository": {
      "Value": { "Ref": "Repository" }
    },

    "Vpc": {
      "Value": { "Ref": "Vpc" }
    },

    "Subnet": {
      "Value": { "Ref": "Subnet" }
    }
  }
}
